
../asm/objdump/xdp_block_port8080O3.o:	file format elf64-bpf

Disassembly of section xdp_prog:

0000000000000000 <xdp_prog_main>:
; {
       0:	r6 = 1
;     void *data_end = (void *)(long)ctx->data_end;
       1:	r9 = *(u32 *)(r1 + 4)
;     void *data = (void *)(long)ctx->data;
       2:	r7 = *(u32 *)(r1 + 0)
;     if (eth + 1 > (struct ethhdr *)data_end)
       3:	r8 = r7
       4:	r8 += 14
       5:	if r8 > r9 goto +28 <LBB0_6>
;     if (iph + 1 > (struct iphdr *)data_end)
       6:	r1 = r7
       7:	r1 += 34
       8:	if r1 > r9 goto +25 <LBB0_6>
;     __u8 *blocked = bpf_map_lookup_elem(&blocked_map, &iph->saddr);
       9:	r7 += 26
      10:	r1 = 0 ll
      12:	r2 = r7
      13:	call 1
;     if (blocked)
      14:	if r0 != 0 goto +19 <LBB0_6>
;     struct tcphdr *tcph = data + sizeof(struct ethhdr) + (iph->ihl * 4);
      15:	r1 = *(u8 *)(r8 + 0)
      16:	r1 <<= 2
      17:	r1 &= 60
      18:	r8 += r1
;     if (tcph + 1 > (struct tcphdr *)data_end)
      19:	r1 = r8
      20:	r1 += 20
      21:	if r1 > r9 goto +12 <LBB0_6>
      22:	r6 = 2
;     if (tcph->dest == htons(8080))
      23:	r1 = *(u16 *)(r8 + 2)
      24:	if r1 != 36895 goto +9 <LBB0_6>
      25:	r6 = 1
;         __u8 val = 1;
      26:	*(u8 *)(r10 - 1) = r6
      27:	r3 = r10
      28:	r3 += -1
;         bpf_map_update_elem(&blocked_map, &iph->saddr, &val, BPF_ANY);
      29:	r1 = 0 ll
      31:	r2 = r7
      32:	r4 = 0
      33:	call 2

0000000000000110 <LBB0_6>:
; }
      34:	r0 = r6
      35:	exit
