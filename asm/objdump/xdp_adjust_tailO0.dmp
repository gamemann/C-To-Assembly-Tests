
../asm/objdump/xdp_adjust_tailO0.o:	file format elf64-bpf

Disassembly of section xdp_prog:

0000000000000000 <xdp_prog_main>:
; {
       0:	*(u64 *)(r10 - 16) = r1
;     void *data = (void *)(long)ctx->data;
       1:	r1 = *(u64 *)(r10 - 16)
       2:	r1 = *(u32 *)(r1 + 0)
       3:	*(u64 *)(r10 - 24) = r1
;     void *data_end = (void *)(long)ctx->data_end;
       4:	r1 = *(u64 *)(r10 - 16)
       5:	r1 = *(u32 *)(r1 + 4)
       6:	*(u64 *)(r10 - 32) = r1
;     struct ethhdr *eth = data;
       7:	r1 = *(u64 *)(r10 - 24)
       8:	*(u64 *)(r10 - 40) = r1
;     if (eth + 1 > (struct ethhdr *)data_end)
       9:	r2 = *(u64 *)(r10 - 40)
      10:	r2 += 14
      11:	r1 = *(u64 *)(r10 - 32)
      12:	if r1 >= r2 goto +4 <LBB0_2>
      13:	goto +0 <LBB0_1>

0000000000000070 <LBB0_1>:
      14:	r1 = 1
;         return XDP_DROP;
      15:	*(u32 *)(r10 - 4) = r1
      16:	goto +87 <LBB0_15>

0000000000000088 <LBB0_2>:
;     struct iphdr *iph = data + sizeof(struct ethhdr);
      17:	r1 = *(u64 *)(r10 - 24)
      18:	r1 += 14
      19:	*(u64 *)(r10 - 48) = r1
;     if (iph + 1 > (struct iphdr *)data_end)
      20:	r2 = *(u64 *)(r10 - 48)
      21:	r2 += 20
      22:	r1 = *(u64 *)(r10 - 32)
      23:	if r1 >= r2 goto +4 <LBB0_4>
      24:	goto +0 <LBB0_3>

00000000000000c8 <LBB0_3>:
      25:	r1 = 1
;         return XDP_DROP;
      26:	*(u32 *)(r10 - 4) = r1
      27:	goto +76 <LBB0_15>

00000000000000e0 <LBB0_4>:
;     struct tcphdr *tcph = data + sizeof(struct ethhdr) + (iph->ihl * 4);
      28:	r1 = *(u64 *)(r10 - 24)
      29:	r2 = *(u64 *)(r10 - 48)
      30:	r2 = *(u8 *)(r2 + 0)
      31:	r2 &= 15
      32:	r2 <<= 2
      33:	r1 += r2
      34:	r1 += 14
      35:	*(u64 *)(r10 - 56) = r1
;     if (tcph + 1 > (struct tcphdr *)data_end)
      36:	r2 = *(u64 *)(r10 - 56)
      37:	r2 += 20
      38:	r1 = *(u64 *)(r10 - 32)
      39:	if r1 >= r2 goto +4 <LBB0_6>
      40:	goto +0 <LBB0_5>

0000000000000148 <LBB0_5>:
      41:	r1 = 1
;         return XDP_DROP;
      42:	*(u32 *)(r10 - 4) = r1
      43:	goto +60 <LBB0_15>

0000000000000160 <LBB0_6>:
;     if (bpf_xdp_adjust_tail(ctx, (int)32) != 0)
      44:	r1 = 0 ll
      46:	r3 = *(u64 *)(r1 + 0)
      47:	r1 = *(u64 *)(r10 - 16)
      48:	r2 = 32
      49:	callx r3
      50:	r1 = r0
      51:	r1 <<= 32
      52:	r1 >>= 32
      53:	if r1 == 0 goto +4 <LBB0_8>
      54:	goto +0 <LBB0_7>

00000000000001b8 <LBB0_7>:
      55:	r1 = 0
;         return XDP_ABORTED;
      56:	*(u32 *)(r10 - 4) = r1
      57:	goto +46 <LBB0_15>

00000000000001d0 <LBB0_8>:
;     data = (void *)(long)ctx->data;
      58:	r1 = *(u64 *)(r10 - 16)
      59:	r1 = *(u32 *)(r1 + 0)
      60:	*(u64 *)(r10 - 24) = r1
;     data_end = (void *)(long)ctx->data_end;
      61:	r1 = *(u64 *)(r10 - 16)
      62:	r1 = *(u32 *)(r1 + 4)
      63:	*(u64 *)(r10 - 32) = r1
;     eth = data;
      64:	r1 = *(u64 *)(r10 - 24)
      65:	*(u64 *)(r10 - 40) = r1
;     if (eth + 1 > (struct ethhdr *)data_end)
      66:	r2 = *(u64 *)(r10 - 40)
      67:	r2 += 14
      68:	r1 = *(u64 *)(r10 - 32)
      69:	if r1 >= r2 goto +4 <LBB0_10>
      70:	goto +0 <LBB0_9>

0000000000000238 <LBB0_9>:
      71:	r1 = 1
;         return XDP_DROP;
      72:	*(u32 *)(r10 - 4) = r1
      73:	goto +30 <LBB0_15>

0000000000000250 <LBB0_10>:
;     iph = data + sizeof(struct ethhdr);
      74:	r1 = *(u64 *)(r10 - 24)
      75:	r1 += 14
      76:	*(u64 *)(r10 - 48) = r1
;     if (iph + 1 > (struct iphdr *)data_end)
      77:	r2 = *(u64 *)(r10 - 48)
      78:	r2 += 20
      79:	r1 = *(u64 *)(r10 - 32)
      80:	if r1 >= r2 goto +4 <LBB0_12>
      81:	goto +0 <LBB0_11>

0000000000000290 <LBB0_11>:
      82:	r1 = 1
;         return XDP_DROP;
      83:	*(u32 *)(r10 - 4) = r1
      84:	goto +19 <LBB0_15>

00000000000002a8 <LBB0_12>:
;     tcph = data + sizeof(struct ethhdr) + (iph->ihl * 4);
      85:	r1 = *(u64 *)(r10 - 24)
      86:	r2 = *(u64 *)(r10 - 48)
      87:	r2 = *(u8 *)(r2 + 0)
      88:	r2 &= 15
      89:	r2 <<= 2
      90:	r1 += r2
      91:	r1 += 14
      92:	*(u64 *)(r10 - 56) = r1
;     if (tcph + 1 > (struct tcphdr *)data_end)
      93:	r2 = *(u64 *)(r10 - 56)
      94:	r2 += 20
      95:	r1 = *(u64 *)(r10 - 32)
      96:	if r1 >= r2 goto +4 <LBB0_14>
      97:	goto +0 <LBB0_13>

0000000000000310 <LBB0_13>:
      98:	r1 = 1
;         return XDP_DROP;
      99:	*(u32 *)(r10 - 4) = r1
     100:	goto +3 <LBB0_15>

0000000000000328 <LBB0_14>:
     101:	r1 = 2
;     return XDP_PASS;
     102:	*(u32 *)(r10 - 4) = r1
     103:	goto +0 <LBB0_15>

0000000000000340 <LBB0_15>:
; }
     104:	r0 = *(u32 *)(r10 - 4)
     105:	exit
