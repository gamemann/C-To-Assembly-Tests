
../asm/objdump/xdp_cmp_builtinO0.o:	file format elf64-bpf

Disassembly of section xdp_prog:

0000000000000000 <xdp_prog_main>:
; {
       0:	*(u64 *)(r10 - 16) = r1
;     void *data = (void *)(long)ctx->data;
       1:	r1 = *(u64 *)(r10 - 16)
       2:	r1 = *(u32 *)(r1 + 0)
       3:	*(u64 *)(r10 - 24) = r1
;     void *data_end = (void *)(long)ctx->data_end;
       4:	r1 = *(u64 *)(r10 - 16)
       5:	r1 = *(u32 *)(r1 + 4)
       6:	*(u64 *)(r10 - 32) = r1
;     struct ethhdr *eth = data;
       7:	r1 = *(u64 *)(r10 - 24)
       8:	*(u64 *)(r10 - 40) = r1
;     if (eth + 1 > (struct ethhdr *)data_end)
       9:	r2 = *(u64 *)(r10 - 40)
      10:	r2 += 14
      11:	r1 = *(u64 *)(r10 - 32)
      12:	if r1 >= r2 goto +4 <LBB0_2>
      13:	goto +0 <LBB0_1>

0000000000000070 <LBB0_1>:
      14:	r1 = 1
;         return XDP_DROP;
      15:	*(u32 *)(r10 - 4) = r1
      16:	goto +59 <LBB0_11>

0000000000000088 <LBB0_2>:
;     struct iphdr *iph = data + sizeof(struct ethhdr);
      17:	r1 = *(u64 *)(r10 - 24)
      18:	r1 += 14
      19:	*(u64 *)(r10 - 48) = r1
;     if (iph + 1 > (struct iphdr *)data_end)
      20:	r2 = *(u64 *)(r10 - 48)
      21:	r2 += 20
      22:	r1 = *(u64 *)(r10 - 32)
      23:	if r1 >= r2 goto +4 <LBB0_4>
      24:	goto +0 <LBB0_3>

00000000000000c8 <LBB0_3>:
      25:	r1 = 1
;         return XDP_DROP;
      26:	*(u32 *)(r10 - 4) = r1
      27:	goto +48 <LBB0_11>

00000000000000e0 <LBB0_4>:
;     struct udphdr *udph = data + sizeof(struct ethhdr) + (iph->ihl * 4);
      28:	r1 = *(u64 *)(r10 - 24)
      29:	r2 = *(u64 *)(r10 - 48)
      30:	r2 = *(u8 *)(r2 + 0)
      31:	r2 &= 15
      32:	r2 <<= 2
      33:	r1 += r2
      34:	r1 += 14
      35:	*(u64 *)(r10 - 56) = r1
;     if (udph + 1 > (struct udphdr *)data_end)
      36:	r2 = *(u64 *)(r10 - 56)
      37:	r2 += 8
      38:	r1 = *(u64 *)(r10 - 32)
      39:	if r1 >= r2 goto +4 <LBB0_6>
      40:	goto +0 <LBB0_5>

0000000000000148 <LBB0_5>:
      41:	r1 = 1
;         return XDP_DROP;
      42:	*(u32 *)(r10 - 4) = r1
      43:	goto +32 <LBB0_11>

0000000000000160 <LBB0_6>:
;     __u8 *pl = data + sizeof(struct ethhdr) + (iph->ihl * 4) + sizeof(struct udphdr);
      44:	r1 = *(u64 *)(r10 - 24)
      45:	r2 = *(u64 *)(r10 - 48)
      46:	r2 = *(u8 *)(r2 + 0)
      47:	r2 &= 15
      48:	r2 <<= 2
      49:	r1 += r2
      50:	r1 += 22
      51:	*(u64 *)(r10 - 64) = r1
;     if (pl + sizeof(payload) + 1 > (__u8 *)data_end)
      52:	r2 = *(u64 *)(r10 - 64)
      53:	r2 += 6
      54:	r1 = *(u64 *)(r10 - 32)
      55:	if r1 >= r2 goto +4 <LBB0_8>
      56:	goto +0 <LBB0_7>

00000000000001c8 <LBB0_7>:
      57:	r1 = 2
;         return XDP_PASS;
      58:	*(u32 *)(r10 - 4) = r1
      59:	goto +16 <LBB0_11>

00000000000001e0 <LBB0_8>:
;     if (memcmp(pl, &payload, sizeof(payload)) == 0)
      60:	r1 = *(u64 *)(r10 - 64)
      61:	r2 = 0 ll
      63:	r3 = 5
      64:	call -1
      65:	r1 = r0
      66:	r1 <<= 32
      67:	r1 >>= 32
      68:	if r1 != 0 goto +4 <LBB0_10>
      69:	goto +0 <LBB0_9>

0000000000000230 <LBB0_9>:
      70:	r1 = 1
;         return XDP_DROP;
      71:	*(u32 *)(r10 - 4) = r1
      72:	goto +3 <LBB0_11>

0000000000000248 <LBB0_10>:
      73:	r1 = 2
;     return XDP_PASS;
      74:	*(u32 *)(r10 - 4) = r1
      75:	goto +0 <LBB0_11>

0000000000000260 <LBB0_11>:
; }
      76:	r0 = *(u32 *)(r10 - 4)
      77:	exit
